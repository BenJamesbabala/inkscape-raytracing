"""
Module to describe and interact with a scene composed of various optical
objects
"""

from typing import Optional, List, NamedTuple, Iterable, Tuple

import inkex

from .geometry import GeometricObject
from .material import OpticMaterial
from .ray import Ray


class OpticalObject(NamedTuple):
    geometry: GeometricObject
    material: OpticMaterial


class World(object):
    """Stores a scene and computes the interaction with a ray"""

    def __init__(self, list_: Optional[List[OpticalObject]] = None):
        if list_ is None:
            list_ = []
        self._objects = list(list_)

    def add_object(self, obj: OpticalObject):
        self._objects.append(obj)

    def __iter__(self) -> Iterable[OpticalObject]:
        return iter(self._objects)
        
    @property
    def num_objects(self) -> int:
        return len(self._objects)

    def propagate_beam(self, beam_seed: Ray) -> List[List[Tuple[Ray, float]]]:
        """Computes the propagation of a beam in the system

        :return: List of all the beam paths generated by this seed.
            It is stored as
            [path0[(Ray0, t0), (Ray1, t1), ...], path1[...], ...].
            Each path is a list of successive rays having each traveled by
            an amount :math:`t` before hitting an object.
        """

        for object_ in self:
            inkex.utils.debug(object_.geometry.hit(beam_seed))
